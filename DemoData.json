{
  "data": [
    {
      "title": "Python",
      "paragraphs": [
        {
          "context": "To access an element in a Python iterable, such as a list, you need to use an index that corresponds to the position of the element.In Python, indexing is zero-based. This means the first element has 0 as its index, the second element has 1 as its index, and so on.In Python, it is also possible to use negative indexing to access values of a sequence.Negative indexing accesses items relative to the end of the sequence. The index -1 reads the last element, -2 the second last, and so on.In Python, slicing makes it possible to access parts of sequences, such as strings or lists. This makes it possible to access, modify, and delete items in a readable and concise fashion.Slicing works similar to indexing, but instead of accessing a single value, multiple values are accessed.Slicing uses indexing to access the range of elements. These indexes are also zero-based.To reverse a list in Python, you can use negative slicing. As you want to slice the whole list, you can omit the start and stop values altogether.To reverse the slicing, specify a negative step value.As you want to include each value in the reversed list, the step size should be -1.[::-1] means you create a slice of a sequence that traverses the whole sequence starting from the end of it.Normally, the slicing follows sequence[start:stop:step] syntax. However, when you want to go from the beginning of the sequence to the end of it, you can omit start and stop. To indicate you want to start slicing from the end and end at the start, specify a negative step.",
          "qas": [
            {
              "answers": [
                { "answer_start": "489:581", "text": "slicing" },
                { "answer_start": "489:581", "text": "slicing in python" },
                {
                  "answer_start": "489:581",
                  "text": "slicing"
                },
                { "answer_start": "489:581", "text": "slicing in python" },
                {
                  "answer_start": "489:581",
                  "text": "slicing in python"
                },
                { "answer_start": "489:581", "text": "slicing in python" }
              ],
              "question": "What Do you understand from [:780:786] ?",
              "id": "Question1"
            },
            {
              "answers": [
                { "answer_start": "1069:1160", "text": "reversed list" },
                { "answer_start": "1069:1160", "text": "reversed list" },
                {
                  "answer_start": "1069:1160",
                  "text": "slicing in python"
                },
                { "answer_start": "1069:1160", "text": "reversed list" },
                {
                  "answer_start": "1069:1160",
                  "text": "reversed list"
                },
                { "answer_start": "1069:1160", "text": "reversed list" }
              ],
              "question": "What is the step size for a reversed list ?",
              "id": "Question2"
            },
            {
              "answers": [
                { "answer_start": "0:132", "text": "slicing in python" },
                { "answer_start": "0:132", "text": "slicing in python" },
                {
                  "answer_start": "0:132",
                  "text": "slicing and indexing"
                },
                { "answer_start": "0:132", "text": "slicing and indexing" },
                {
                  "answer_start": "0:132",
                  "text": "reversed list"
                },
                { "answer_start": "0:132", "text": "slicing in python" }
              ],
              "question": "What is the difference between slicing and indexing ?",
              "id": "Question3"
            },
            {
              "answers": [
                {
                  "answer_start": "422:489",
                  "text": "index of the last element"
                },
                {
                  "answer_start": "422:489",
                  "text": "index of the last element"
                },
                {
                  "answer_start": "422:489",
                  "text": "index of the last element"
                },
                {
                  "answer_start": "422:489",
                  "text": "index of the last element"
                },
                {
                  "answer_start": "422:489",
                  "text": "index of the last element"
                },
                {
                  "answer_start": "422:489",
                  "text": "index of the last element"
                }
              ],
              "question": "What is the index of the last element in a list?",
              "id": "Question4"
            },
            {
              "answers": [
                {
                  "answer_start": "432:434",
                  "text": "index of the last element"
                },
                {
                  "answer_start": "432:434",
                  "text": "index of the last element"
                },
                {
                  "answer_start": "432:434",
                  "text": "index of the last element"
                },
                {
                  "answer_start": "422:489",
                  "text": "index of the last element"
                },
                {
                  "answer_start": "432:434",
                  "text": "index of the last element"
                },
                {
                  "answer_start": "432:434",
                  "text": "index of the last element"
                }
              ],
              "question": "which index reads the last element?",
              "id": "Question5"
            },
            {
              "answers": [
                {
                  "answer_start": "422:489",
                  "text": "index of the last element"
                },
                {
                  "answer_start": "422:489",
                  "text": "index of the last element"
                },
                {
                  "answer_start": "422:489",
                  "text": "index of the last element"
                },
                {
                  "answer_start": "422:489",
                  "text": "index of the last element"
                },
                {
                  "answer_start": "422:489",
                  "text": "index of the last element"
                },
                {
                  "answer_start": "422:489",
                  "text": "index of the last element"
                }
              ],
              "question": "What is the index of the last element in a list?",
              "id": "Question6"
            }
          ]
        },

        {
          "context": "When known to the interpreter, the script name and additional arguments thereafter are turned into a list of strings and assigned to the argv variable in the sys module. You can access this list by executing import sys. The length of the list is at least one; when no script and no arguments are given, sys.argv[0] is an empty string. When the script name is given as '-' (meaning standard input), sys.argv[0] is set to '-'. When -c command is used, sys.argv[0] is set to '-c'. When -m module is used, sys.argv[0] is set to the full name of the located module. Options found after -c command or -m module are not consumed by the Python interpreter’s option processing but left in sys.argv for the command or module to handle.When commands are read from a tty, the interpreter is said to be in interactive mode. In this mode it prompts for the next command with the primary prompt, usually three greater-than signs (>>>); for continuation lines it prompts with the secondary prompt, by default three dots (...). The interpreter prints a welcome message stating its version number and a copyright notice before printing the first prompt. In the following examples, input and output are distinguished by the presence or absence of prompts (>>> and …): to repeat the example, you must type everything after the prompt, when the prompt appears; lines that do not begin with a prompt are output from the interpreter. Note that a secondary prompt on a line by itself in an example means you must type a blank line; this is used to end a multi-line command.You can toggle the display of prompts and output by clicking on >>> in the upper-right corner of an example box. If you hide the prompts and output for an example, then you can easily copy and paste the input lines into your interpreter.Many of the examples in this manual, even those entered at the interactive prompt, include comments. Comments in Python start with the hash character, #, and extend to the end of the physical line. A comment may appear at the start of a line or following whitespace or code, but not within a string literal. A hash character within a string literal is just a hash character. Since comments are to clarify code and are not interpreted by Python, they may be omitted when typing in examples.",
          "qas": [
            {
              "answers": [
                { "answer_start": "1970:2089", "text": "String literals" },
                { "answer_start": "1970:2089", "text": "String literals" },
                { "answer_start": "1970:2089", "text": "String literals" },
                { "answer_start": "1970:2089", "text": "String literals" },
                { "answer_start": "1970:2089", "text": "String literals" }
              ],
              "question": "What is the difference between a comment and a script?",
              "id": "Question1"
            },
            {
              "answers": [
                { "answer_start": "1242:1403", "text": "input and output" },
                {
                  "answer_start": "1242:1403",
                  "text": "Difference input and output"
                },
                {
                  "answer_start": "1242:1403",
                  "text": "Between input and output"
                },
                {
                  "answer_start": "1242:1403",
                  "text": "Between input and output"
                },
                {
                  "answer_start": "1242:1403",
                  "text": "Between input and output"
                }
              ],
              "question": "What is the difference between input and output?",
              "id": "Question2"
            },
            {
              "answers": [
                { "answer_start": "-----", "text": "----" },
                { "answer_start": "-----", "text": "----" },
                { "answer_start": "-----", "text": "----" },
                { "answer_start": "-----", "text": "----" },
                { "answer_start": "-----", "text": "----" }
              ],
              "question": "",
              "id": "----"
            },
            {
              "answers": [
                { "answer_start": "-----", "text": "----" },
                { "answer_start": "-----", "text": "----" },
                { "answer_start": "-----", "text": "----" },
                { "answer_start": "-----", "text": "----" },
                { "answer_start": "-----", "text": "----" }
              ],
              "question": "-----",
              "id": "----"
            }
          ]
        },

        {
          "context": "The given end point is never part of the generated sequence; range(10) generates 10 values, the legal indices for items of a sequence of length 10. It is possible to let the range start at another number, or to specify a different increment (even negative; sometimes this is called the step).In many ways the object returned by range() behaves as if it is a list, but in fact it isnt. It is an object which returns the successive items of the desired sequence when you iterate over it, but it doesnt really make the list, thus saving space.We say such an object is iterable, that is, suitable as a target for functions and constructs that expect something from which they can obtain successive items until the supply is exhausted. We have seen that the for statement is such a construct, while an example of a function that takes an iterable is sum().The break statement, like in C, breaks out of the innermost enclosing for or while loop.Loop statements may have an else clause; it is executed when the loop terminates through exhaustion of the iterable (with for) or when the condition becomes false (with while), but not when the loop is terminated by a break statement. This is exemplified by the following loop, which searches for prime numbers.",
          "qas": [
            {
              "answers": [
                { "answer_start": "-----", "text": "----" },
                { "answer_start": "-----", "text": "----" },
                { "answer_start": "-----", "text": "----" }
              ],
              "question": "What is the difference between the range and the step?",
              "id": "----"
            },
            {
              "answers": [
                { "answer_start": "-----", "text": "----" },
                { "answer_start": "-----", "text": "----" },
                { "answer_start": "-----", "text": "----" }
              ],
              "question": "-----",
              "id": "----"
            }
          ]
        }
      ]
    }
  ]
}
